add_dots(x...) = vcat(collect(x), Symbol.('.', x))

# from https://github.com/JuliaLang/julia/blob/master/src/julia-parser.scm
operator_precedence = Dict(
    :assignment => vcat(add_dots(
            :(=), :(+=), :(-=), :(*=), :(/=), :(//=), :(\=), :(^=), :(÷=), :(%=), :(<<=), :(>>=), :(>>>=), :(|=), :(&=), :(⊻=), :(≔), :(⩴), :(≕), :(~)
        ), [
            :(:=), :($=)
        ]),
    :pair => add_dots(:(=>)),
    :conditional => [:?],
    :arrow => add_dots(
       :(←), :(→), :(↔), :(↚), :(↛), :(↞), :(↠), :(↢), :(↣), :(↦), :(↤), :(↮), :(⇎), :(⇍), :(⇏), :(⇐), :(⇒), :(⇔), :(⇴), :(⇶), :(⇷), :(⇸), :(⇹), :(⇺), :(⇻), :(⇼), :(⇽), :(⇾), :(⇿), :(⟵), :(⟶), :(⟷), :(⟹), :(⟺), :(⟻), :(⟼), :(⟽), :(⟾), :(⟿), :(⤀), :(⤁), :(⤂), :(⤃), :(⤄), :(⤅), :(⤆), :(⤇), :(⤌), :(⤍), :(⤎), :(⤏), :(⤐), :(⤑), :(⤔), :(⤕), :(⤖), :(⤗), :(⤘), :(⤝), :(⤞), :(⤟), :(⤠), :(⥄), :(⥅), :(⥆), :(⥇), :(⥈), :(⥊), :(⥋), :(⥎), :(⥐), :(⥒), :(⥓), :(⥖), :(⥗), :(⥚), :(⥛), :(⥞), :(⥟), :(⥢), :(⥤), :(⥦), :(⥧), :(⥨), :(⥩), :(⥪), :(⥫), :(⥬), :(⥭), :(⥰), :(⧴), :(⬱), :(⬰), :(⬲), :(⬳), :(⬴), :(⬵), :(⬶), :(⬷), :(⬸), :(⬹), :(⬺), :(⬻), :(⬼), :(⬽), :(⬾), :(⬿), :(⭀), :(⭁), :(⭂), :(⭃), :(⭄), :(⭇), :(⭈), :(⭉), :(⭊), :(⭋), :(⭌), :(￩), :(￫), :(⇜), :(⇝), :(↜), :(↝), :(↩), :(↪), :(↫), :(↬), :(↼), :(↽), :(⇀), :(⇁), :(⇄), :(⇆), :(⇇), :(⇉), :(⇋), :(⇌), :(⇚), :(⇛), :(⇠), :(⇢), :(↷), :(↶), :(↺), :(↻), :(-->), :(<--), :(<-->)
    ),
    :comparison => vcat(add_dots(
            :(>), :(<), :(>=), :(≥), :(<=), :(≤), :(==), :(===), :(≡), :(!=), :(≠), :(!==), :(≢), :(∈), :(∉), :(∋), :(∌), :(⊆), :(⊈), :(⊂), :(⊄), :(⊊), :(∝), :(∊), :(∍), :(∥), :(∦), :(∷), :(∺), :(∻), :(∽), :(∾), :(≁), :(≃), :(≂), :(≄), :(≅), :(≆), :(≇), :(≈), :(≉), :(≊), :(≋), :(≌), :(≍), :(≎), :(≐), :(≑), :(≒), :(≓), :(≖), :(≗), :(≘), :(≙), :(≚), :(≛), :(≜), :(≝), :(≞), :(≟), :(≣), :(≦), :(≧), :(≨), :(≩), :(≪), :(≫), :(≬), :(≭), :(≮), :(≯), :(≰), :(≱), :(≲), :(≳), :(≴), :(≵), :(≶), :(≷), :(≸), :(≹), :(≺), :(≻), :(≼), :(≽), :(≾), :(≿), :(⊀), :(⊁), :(⊃), :(⊅), :(⊇), :(⊉), :(⊋), :(⊏), :(⊐), :(⊑), :(⊒), :(⊜), :(⊩), :(⊬), :(⊮), :(⊰), :(⊱), :(⊲), :(⊳), :(⊴), :(⊵), :(⊶), :(⊷), :(⋍), :(⋐), :(⋑), :(⋕), :(⋖), :(⋗), :(⋘), :(⋙), :(⋚), :(⋛), :(⋜), :(⋝), :(⋞), :(⋟), :(⋠), :(⋡), :(⋢), :(⋣), :(⋤), :(⋥), :(⋦), :(⋧), :(⋨), :(⋩), :(⋪), :(⋫), :(⋬), :(⋭), :(⋲), :(⋳), :(⋴), :(⋵), :(⋶), :(⋷), :(⋸), :(⋹), :(⋺), :(⋻), :(⋼), :(⋽), :(⋾), :(⋿), :(⟈), :(⟉), :(⟒), :(⦷), :(⧀), :(⧁), :(⧡), :(⧣), :(⧤), :(⧥), :(⩦), :(⩧), :(⩪), :(⩫), :(⩬), :(⩭), :(⩮), :(⩯), :(⩰), :(⩱), :(⩲), :(⩳), :(⩵), :(⩶), :(⩷), :(⩸), :(⩹), :(⩺), :(⩻), :(⩼), :(⩽), :(⩾), :(⩿), :(⪀), :(⪁), :(⪂), :(⪃), :(⪄), :(⪅), :(⪆), :(⪇), :(⪈), :(⪉), :(⪊), :(⪋), :(⪌), :(⪍), :(⪎), :(⪏), :(⪐), :(⪑), :(⪒), :(⪓), :(⪔), :(⪕), :(⪖), :(⪗), :(⪘), :(⪙), :(⪚), :(⪛), :(⪜), :(⪝), :(⪞), :(⪟), :(⪠), :(⪡), :(⪢), :(⪣), :(⪤), :(⪥), :(⪦), :(⪧), :(⪨), :(⪩), :(⪪), :(⪫), :(⪬), :(⪭), :(⪮), :(⪯), :(⪰), :(⪱), :(⪲), :(⪳), :(⪴), :(⪵), :(⪶), :(⪷), :(⪸), :(⪹), :(⪺), :(⪻), :(⪼), :(⪽), :(⪾), :(⪿), :(⫀), :(⫁), :(⫂), :(⫃), :(⫄), :(⫅), :(⫆), :(⫇), :(⫈), :(⫉), :(⫊), :(⫋), :(⫌), :(⫍), :(⫎), :(⫏), :(⫐), :(⫑), :(⫒), :(⫓), :(⫔), :(⫕), :(⫖), :(⫗), :(⫘), :(⫙), :(⫷), :(⫸), :(⫹), :(⫺), :(⊢), :(⊣), :(⟂), :(<:), :(>:)
        ),
        [
            :in, :isa
        ]),
    :lazy_or => [
        :(|), :(||)
    ],
    :lazy_and => [
        :(&&)
    ],
    :pipe => [
        add_dots(:(<|), :(|>)),
    ],
    :colon => vcat(add_dots(
            :(…), :(⁝), :(⋮), :(⋱), :(⋰), :(⋯)
        ),
        [
            :(:), :(..)
        ]),
    :plus => vcat(add_dots(
        :(+), :(-), :(¦), :(⊕), :(⊖), :(⊞), :(⊟), :(++), :(∪), :(∨), :(⊔), :(±), :(∓), :(∔), :(∸), :(≏), :(⊎), :(⊻), :(⊽), :(⋎), :(⋓), :(⧺), :(⧻), :(⨈), :(⨢), :(⨣), :(⨤), :(⨥), :(⨦), :(⨧), :(⨨), :(⨩), :(⨪), :(⨫), :(⨬), :(⨭), :(⨮), :(⨹), :(⨺), :(⩁), :(⩂), :(⩅), :(⩊), :(⩌), :(⩏), :(⩐), :(⩒), :(⩔), :(⩖), :(⩗), :(⩛), :(⩝), :(⩡), :(⩢), :(⩣)
    ), [:($)]),
    :times => add_dots(
        :(*), :(/), :(⌿), :(÷), :(%), :(&), :(⋅), :(∘), :(×), :(\), :(∩), :(∧), :(⊗), :(⊘), :(⊙), :(⊚), :(⊛), :(⊠), :(⊡), :(⊓), :(∗), :(∙), :(∤), :(⅋), :(≀), :(⊼), :(⋄), :(⋆), :(⋇), :(⋉), :(⋊), :(⋋), :(⋌), :(⋏), :(⋒), :(⟑), :(⦸), :(⦼), :(⦾), :(⦿), :(⧶), :(⧷), :(⨇), :(⨰), :(⨱), :(⨲), :(⨳), :(⨴), :(⨵), :(⨶), :(⨷), :(⨸), :(⨻), :(⨼), :(⨽), :(⩀), :(⩃), :(⩄), :(⩋), :(⩍), :(⩎), :(⩑), :(⩓), :(⩕), :(⩘), :(⩚), :(⩜), :(⩞), :(⩟), :(⩠), :(⫛), :(⊍), :(▷), :(⨝), :(⟕), :(⟖), :(⟗), :(⨟)
    ),
    :rational => add_dots(:(//)),
    :bitshift => add_dots(:(<<), :(>>), :(>>>)),
    :power => add_dots(
        :(^), :(↑), :(↓), :(⇵), :(⟰), :(⟱), :(⤈), :(⤉), :(⤊), :(⤋), :(⤒), :(⤓), :(⥉), :(⥌), :(⥍), :(⥏), :(⥑), :(⥔), :(⥕), :(⥘), :(⥙), :(⥜), :(⥝), :(⥠), :(⥡), :(⥣), :(⥥), :(⥮), :(⥯), :(￪), :(￬)
    ),
    :dot => [:(.)],
    :decl => [:(::)],
    :vararg => [:(...)],
)

_unary_operators = Dict(
    :unary => vcat(add_dots(
            :(!), :(¬), :(√), :(∛), :(∜)
        ),
        [
            :(<:), :(>:)
        ]),
    :unary_and_binary => vcat(add_dots(
            :(+), :(-), :(⋆), :(±), :(∓)
        ),
        [
            :($), :(&), :(~)
        ])
)

all_operators = vcat(values(operator_precedence)...)
unary_operators = vcat(values(_unary_operators)...)
binary_operators = setdiff(all_operators, unary_operators)
